// Функция это набор действий + какое-то значение, которое она возвращает
// Для того, чтобы функция сработала, ее нужно вызвать
// Вызвать ее можно в любом месте файла, до описания или после
// Это связано с особенностями обработки JS файлов браузерами
// Так в первом проходе браузер проходит весь JS файл 
// и находит функции и знает о их существовании
one();
function one() {
  return 9
}
// Функцию можно использовать в выражании, если у нее есть
// команда return, которой она заканчивается
// Команда return резюмирует работу функции и возвращает какое-то значение 
// и она нам дает возможность использовать функцию в выражениях
// То есть:
console.log(5 + one())
// В результате вкладка консоль вызвала 14. 
// return подставился вместо имени функции 
// Несколько особенностей return:
// - return заканчивает функцию. Если поставить его в начале, 
// а потом будут какие-то команды, то все, что ниже будет проигнорировано 
// return можно использовать как досрочный выход из функции

// Пример простенькой функции для сложения чисел: 

// function summa(a,b) {
//   return a + b;
// }

// Как вызвать такую функцию? Нужно написать ее имя, а вскобках передать значения

// console.log(summa(4, 5))

// Несколько особенностей js:
// 1) В аргументах функции не нужно писать let (то есть эти аргументы не нужно объявлять)
// 2) Можно передать значительно больше параметров,чем принимает функция. Это не 
// вызовет ошибки, так же можно меньше параметров передать. Это так же не вызовет 
// ошибку, но вернет NaN

// Если необходимо задать несколько параметров 
// по умолчанию(напр.пользов.забыл ввести число), то можно сделать так: 
// function summa(a, b) {
//   let c = 50;
  // a = a || 10; 
  // b = b || 20;
  //   alert(a + b);
// }
// console.log(summa());
  // Что произойдет? || - это оператор "или"
  // Если пользователь забудет ввести а, то а будет undefined
  // Результат операции undefined или 10 будет 10 и а будет присвоено 10
  // В ES6 задание параметров по умолчанию упрощено и выглядит так:
function summa(a = 0, b = 10) {
  // Если пользователь задал значение, то оно подставится
  // в переменную, если нет, то будет использовано значение по умолчанию
  console.log(a+b)
}
let c = 10;
summa(4)

// 3) Функция порождает блок видимости
// То есть если я внутри функции объявлю переменную, 
// то за пределами функции я не могу ее использовать
// Наприемр выражение alert(c) не сработает
// НО если перед объявлением переменной внутри функции убрать ключевое слово 
// let, то с станет глобальной переменной и к ней можно обращаться внутри любой функции
// 4) Возможно описывать функции внутри функций
// Тое сть внутри данной функции можно объявить еще множество функций и их использовать

// ВАЖНЫЙ ПРИМЕР 
// Для этого создам кнопку, которая будет суммировать два числа 
document.getElementById('b1').onclick = function () {
  summa(15, 15);
}

// Несколько способов описания функции: 
let d = function () {
  alert('work')
}
d();
