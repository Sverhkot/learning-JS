
// let t = 999;
// console.log(testPrimer());

// function testPrimer(){
//   return t;
// }
// console.log(testPrimer());
// Так как функция объявлена при исп ключевого слова function, я могу ее вызвать 
// в любом месте программы - как до объявления функции, так и после.
// Переменная t объявлена до объявления функции
// Функция в примере выше сработала два раза вне зависимости от места ее описания
// Почему так произошло?
// Логика следующая: Внутри функции есть определенный блок видимости
// У меня внутри функции нигде не объявлена переменная t, соответственно 
// JS выходит из функции и ищет в родительской, по отношению к текущей, функции эту переменную 
// В ней объявлена переменная и соответственно JS находит ее и использует.
// То есть JS использует первую встречную у родителя такую же переменную
// Если я объявлю так же переменную t внутри функции таким вот образом, то 

function testPrimer() {
  let t = 89;
  return t;
}
console.log(testPrimer());

// То JS будет видеть, что внутри объявленна 
// переменная t равная 89 и соответственно использует ее.
// Но за пределами функции этой переменной t = 89 не существует
// Все, что объявленно внутри функции - снаружи не видно и не может быть использовано
// Все, что объявлено снаружи может быть исп внутри, 
// если в ней не объявлена такая же переменная