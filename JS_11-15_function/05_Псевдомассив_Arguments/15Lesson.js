// Псевдомассив Arguments
// function one(a) {
//     console.log(a);
//     console.log(arguments)
// }
// Если при вызове указать больше параметров, чем это нужно, то функция 
// использует первый из них, а остальные проигнорирует 

// one(5, 6, 7, 8);
// Внутри функции есть специальный псевдомассив, который называется arguments
// Если я его выведу в консоль, то увижу, что внутрь попали много объектов
// Попало что-то похожее на массив с нумерцией всех переданных параметров и длинной
// То есть почему он называется ПСЕВДОМАССИВ? 
// К нему можна обращаться по индексу, как к массиву, и узнать его длинну
// Во всем остальном это другой объект, который похож на массив

// Все, что я передаю в функцию, попадает внутрь arguments
// При необходимости их можно вытащить 

// Даже если я не объявляю параметры, а при вызове я их несколько укажу 
// и попытаюсь получить один из них, то вот что из этого получится: 

// function one() {
//     console.log(arguments);
//     console.log(arguments[0])
// }
// one(5, 6, 7, 8);
// в консоль попадет весь псевдомассив и нулевой элемент, то есть 5
// Сейчас выведем все элементы псевдомассива
// Для этого используем простенький цикл 
// function one(a) {
//     "use strict"
//     // Это для того, чтобы использовать строгий режим ES6
//     console.log(a)
//     arguments[0] = "Bla bla"
//     // for (let i = 0; i < arguments.length; i++) {
//     //     console.log(arguments[i]);
//     // }
//     console.log(arguments);
//     console.log(a)
// }
// one(5, 6, 7, 8);
// При использовании строгого режима аргумент не меняется 
// Нулевой эл массива аргументов и аргумент а - одно и то же
// Но даже несмотря на то, что внутри функции мы присваеваем 
// нулевому элементу массива новое значение, аргумент а не перезаписывается
// В ES6 все переменные в виде аргументов, которые мы передаем в функцию, они
// являются локальнымии не зависят на arguments

// Псевдомассив arguments можно перегнать в обычный массив, если это нужно 
// Например, чтобы использовать методы массивов push, pop и т.д
// Это можно сделать циклом: создать пустой массив и добавлять по одному элементу
// Так же можно сдеалть при помощи одного метода Array.from(). Этот метод позволяет 
// создать массив из псевдомассива или массиво подобных объектов
// То есть когда мы получаем элементы с помощью get.elementById() или др. 
// это массиво подобные объекты итерируемые
// К ним можно частично применять действия которые мы делаем с массивами 
// (обращаться по индексу, узнать длинну, например), но push, pop, shift, перебирать 
// при помощи map
// Для того чтобы это делать, необходимо перегнать псевдомассив в массив
// Array.from() получает итерируемый объект и переганяет его в массив
function one(a) {
    "use strict"
    // Это для того, чтобы использовать строгий режим ES6
    console.log(a)
    arguments[0] = "Bla bla"

    console.log(arguments);
    console.log(a);
    let b = Array.from(arguments);
    console.log(b)
}
one(5, 6, 7, 8);