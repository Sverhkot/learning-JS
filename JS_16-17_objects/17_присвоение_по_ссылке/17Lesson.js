// Создадим простой объект
let a = {
  "one": "hello",
  "name": 23
}
// Теперь выполним такую операцию:
let b = {};
for (let key in a) {
  console.log(key)
  b[key] = a[key];
}
b.five = 5;
console.log(b)
// На первый взгляд эти два объекта идентичны 
// Попробуем выводить их вместе 
console.log(a)
// При присвоении по ссылке, если я изменю любое свойство объекта b или 
// добавлю новое, то свойство five добавится и в объект а и в b
// На самом деле, когда мы присваивание производим вот таким образом, 
// это присваивание по ссылке
// То есть мы не создаем новый объект b, объект b указывает на какой-то 
// исходный объект, на который указывает и а
// То есть на самом деле есть какой-то объект, а - его псевдоним и b его объект
// Любые манипуляции с b отражаются на исходном объекте и  соответственно подтягиваются с а
// При копировании элементов таким вот образом, 
// мы получаем один объект с разными именами
// Это так называемое присвоение по ссылке, то есть а и b - это ссылки на исходный объект
// Это очень неудобно и приводит к неправильной работе программы
// Как скопировать объект b, чтобы он стал клоном объекта а, но не был с ним связан? 
// for (let key in a) {
//   console.log(key)
//   b[key] = a[key];
// }
// Если мы сделаем так, то будет создан новый объект b, куда 
// мы занесем значения из объекта а и они станут разными
// Теперь изменения в b не отражаются на а и наоборот
// Такой способ позволяет создать КЛОН объека

// ЦИКЛ for in позволяет перебрать объект
// Мы объявляем какую-то переменную key(ключ) и говорим какой объект разбираем

// При работе с ООП часто используют конструктор 
class Test {
  constructor(a) {
    this.c = a
  }
}
// Создаем новый объект 
let myObj = new Test(5);
myObj.d = 77;
// Посмотрим что это за объект 
console.log(myObj)
// Создался пройтой объект Test, который равен 5
// Если мы попытаемся на основе класса создать еще один объект, то 
let myObj2 = new Test(6)
console.log(myObj2)
// У меня появились два объекта с разными независимыми свойствами
// В этом легко убедиться, если мы добавим в myObj новое свойство

// Таким образом, если использовать, скажем так, классический 
// в других языках программирования класс и создавать на его основе объект, 
// то мы получим два независимых объекта

// Если игнорировать и создавать упрощенным способом объект и копировать, 
// через присвоение по ссылке,то получим проблему при передаче по ссылке  


